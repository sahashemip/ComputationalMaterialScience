from pathlib import Path

import numpy as np

'''
    Performs several linear algebra.

    Methods:
        - get_normalized_vector
        - make_orthogonal
        - create_coordinate_system
        - rotate_material_coordinate_around_z
        - get_beam_polarization_vector
        - compute_raman
        - make_polarplot
        - write_to_file
'''
def get_normalized_vector(input_array: np.ndarray) -> np.ndarray:
    '''Normalizes the input NumPy array'''
    norm_of_array = np.linalg.norm(input_array)
    if norm_of_array == 0:
        return input_array
    return input_array / norm_of_array

def make_orthogonal(vector1: np.ndarray, vector2: np.ndarray):
    '''Calculates the projection of vector1 onto vector2'''
    return vector1 - np.dot(vector1, vector2) * vector2

def create_coordinate_system(vector1: np.ndarray,
                            vector2: np.ndarray):
    '''Returns all 3 axes of a coordinate system as a 3x3 array.'''
    vector3 = np.cross(vector1, vector2)

    if np.all(vector3 == 0):
        raise ValueError(
            'Coordinate system is not generated by parallel bases.'
        )
    return np.array([vector2, vector3, vector1])

def rotate_material_coordinate_around_z(alphas: np.ndarray) -> np.ndarray:
    ''' Return a rotated coordinate system around z-axis
        alphas (np.ndarray): An array of angles in radians.
    '''
    cos_alphas, sin_alphas = np.cos(alphas), np.sin(alphas)
    rotation_matrices = np.zeros((len(alphas), 3, 3))

    rotation_matrices[:, 0, 0] = cos_alphas
    rotation_matrices[:, 0, 1] = -sin_alphas
    rotation_matrices[:, 1, 0] = sin_alphas
    rotation_matrices[:, 1, 1] = cos_alphas
    rotation_matrices[:, 2, 2] = 1

    return rotation_matrices

def get_beam_polarization_vector(basis_set: np.ndarray,
                                material_coord: np.ndarray,
                                axis: np.ndarray):
    '''Returns polarization vector as a 3x1 array'''

    return np.linalg.inv(basis_set) @ material_coord @ basis_set @ axis.T

def compute_raman(vector1: np.ndarray,
                  tensor: np.ndarray,
                  vector2: np.ndarray) -> float:
    '''Returns Raman activity (a float number) for incident
       beam polarization vector (vector1), Raman tensor
       (3x3 matrix) and scattered beam vector (vector2).'''

    return np.abs(vector2.T @ tensor @ vector1)**2

def get_degrees_in_radian(alpha: int) -> np.ndarray:
    '''Returns angles in radian'''
    alphas = np.arange(alpha)
    return np.radians(alphas)

def write_to_npzfile(
    x: np.ndarray,
    y: np.ndarray,
    outfile: Path):
    '''Returns a npz file.'''
    np.savez(outfile, x=x, y=y)
